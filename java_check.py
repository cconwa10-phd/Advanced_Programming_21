from collections import Counter
import numpy as np
import math

#seq = "TAATGAGACAACATCGGCCCACAGGATGAGCTCCATCATAGCCAAAACGACGACTACACGTGCAGAAAAAACCACTCCGTCACTAATAACCCGCAAGGTCGCACTACTCCCCACTAATACTGTACGGAGGACCTCACCTCCACGGAGCGACGCACTGAGAGAGGACGCACACGCGTAGCCAGCTCTCGGAATCAAAGCAATTGTAAATGCTCCTGTGATAAAGGACCTCATAAAGCGAAGAGCGAACAGCCTACTGATTTACCGAACTGAGACGCCCACCGCCCTAACGCCAGCGACCCCTTCTCGTAAGCGTATTGCACCCGCAGTTACAAATCTGCGCGCTGCCTCAGGTATAATGACACGAGGTTCGGACAGAAGTCCTGTCCGCACTTACTGTCGAACTGCACGGAACGTAGCGAAGGTGTTCAGCCAGCGTCATGGTACGACTTGCGGGAGAGAACTCTTATAACCAAACCCCACGAAGCATTCAAACTCCGATATTAAGTGGATTACAAATACACCGAAAGACCCAATGGAATCTGTTTCAAGACATAATAGTCTAAGCGAGCTTCTCACACCTCACAACCCCAAGAGTGGCGTTCCAACACCCCATGACTCATGCTAGCGGGTTGTCGAAACCCGTAAAACAAGCACACTAGCAGCAAACCCAACCCGGCCCGCACTGATCCACATCATCTAGGCCCAAAATGAAACCTGCTGGACTCTCAGAGACTCCATATGATCTTCTCCAGGCGGTCAACGAACGTTCTCTGAATCCAAAGTCGTGCTCGCTAATGCCGTCATCTAGGTTGAATCTGCACGACGCGGCCGTAGATATAACGAAGTGTACTTGTGTGCCCTGAGAGAGCTGCCAAGCAATGCAAGACGGGATTAACTGTGCGAACCTACGGGTAGATGAATCTACAATTTCCGACTGCGCTCAGCATTCAAAATAACTTATAGAACTAGACACAGAAATCACTAATAGCATCCGTAGAGA"
seq = "CAACCTTACGTAAACCATAGGCCCTAGCAG"
weightsS = np.around(np.asarray([.3, .3, .2, .2])*len(seq), 2)
charS = ['A', 'C', 'G', 'T']
totS = dict(zip(charS, weightsS))
seql = list(seq)
seqD = dict(Counter(seql))

#pro = "YVDKKLRSTNGGKHLWDAAMVNIDAIGIFSAIGNELTSGEKPEFVLENGGISKQKPAKPQADTHAKETLLQRSMVLLKDPIPGCYCGKPDTINRGGALHGTELQPVHDSQSLRFNLLKIINYGAIAVCNVTYKSWSMSIGVLVAVACRRKFCYFLTYLVSGQRKTMQSRLDTLWLKIAGETGPHYCPACGTIWSGEDAHSLKNKKRAAPHLRIIAETQAELVLQATVAFKYPAFDNENFSVLEYQTSTQELGLQKSLIKVISLHMVDLIKHQPPSARVFIVATTEPYLLSNSFPYRPTIRGSLVSIAFMEENGYMSKEQGFELSVSVFLCMLMNMEKRGSIKCDFVYHGSVFVVTFIELESLEFIPNLEQKALAIRLHSLSTVSVALGRMHFIKEAKLNNTVHYKNLPAAQDFTTGNGNSNLDQPPNHEMYSHCFAIAYGVAGVLQLTTSINKFASIIQSWTQLVVSLKIMRFAAWTCGVALASKCVQSHTIYSRECTLNKKNVGAGETPYLPQEALTVMTRIELQGTDKHGLDTGDFSHINLNLPGMIEGLFNVRHDIGTKRFYTYKSFDTNYPKKSGADRELLVNSIWAGSLEYNDQGPSTGEAYVSDDFSSYARWSGPGEGNVAALGMLKQYPYEIKHTPLKEASGSDGSDSPSLIKLDSFSVHILAPNLEKKSCTKLNLVSRVTCKWRSREGDDQTLHFVTIWTIASQRDICEGDLNYSVHNANVQIARNWRQRLEFQEGGGNIANGKPRKQRGVSPQFKDRDYDNRDILERFEDAPAEKEGRFYRSIAPEWFRPIAVMPLSRWGADITKSSTFRESPQGQVFRQSALMHCLLPSEISFVVGKYYVVEIARIKFAALSDEDLTYGRWATKGTQALEPFAFFKELTVSNRELPSLTTPYTNLDATCKSEAKCIFSGGMRTELIVPREVVASIETVAQICAVLETGKECELSLFFDEFTDESKPIAEGETTAKGKIPESINDCGRSCTKGCALCQEDF"
pro = "VRFKKRSRVDIIGILVKQSVCKLATASALY"
weightsP = np.around(np.asarray([0.072658, 0.024692, 0.050007, 0.061087, 0.041774, 0.071589, 0.023392, 0.052691, 0.063923, 0.089093, 0.023150, 0.042931, 0.052228, 0.039871, 0.052012, 0.073087, 0.055606, 0.063321, 0.012720, 0.032955])*len(pro), 2)
charP = ['A', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T','V', 'W', 'Y' ]
totP = dict(zip(charP, weightsP))
#print(totP)
prol = list(pro)
proD = dict(Counter(prol))
#print(proD)

def SPMatches(weightsD, stringD):
    booD = {}
    for key, value in weightsD.items():
        for k, v in stringD.items():
            if key == k:
                booD[key] = "[E:" + str(int(round(value, 0))) + " A:" + str(v) + "]"
                #booD[key] = str(round(((v-value)/(v+value/2)*100), 2)) + " %"
    return booD


print(SPMatches(totS, seqD))
print(SPMatches(totP, proD))
